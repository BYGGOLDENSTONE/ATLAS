#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "GameplayTagContainer.h"
#include "VulnerabilityComponent.generated.h"

UENUM(BlueprintType)
enum class EVulnerabilityTier : uint8
{
    None        UMETA(DisplayName = "None"),
    Stunned     UMETA(DisplayName = "Stunned (Yellow)"),
    Crippled    UMETA(DisplayName = "Crippled (Orange)"),
    Exposed     UMETA(DisplayName = "Exposed (Red)")
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnVulnerabilityTierApplied, EVulnerabilityTier, Tier, int32, MaxHits, float, Duration);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnVulnerabilityHitTaken, int32, RemainingHits, EVulnerabilityTier, CurrentTier);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnVulnerabilityTierEnded, EVulnerabilityTier, EndedTier);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnIFramesStarted);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnIFramesEnded);

USTRUCT(BlueprintType)
struct FVulnerabilityTierConfig
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadOnly)
    int32 MaxCriticalHits = 1;

    UPROPERTY(EditAnywhere, BlueprintReadOnly)
    float DamageMultiplier = 2.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly)
    float Duration = 1.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly)
    FLinearColor IndicatorColor = FLinearColor::Yellow;

    UPROPERTY(EditAnywhere, BlueprintReadOnly)
    float RecoveryTime = 0.5f;

    FVulnerabilityTierConfig() {}
};

USTRUCT(BlueprintType)
struct FVulnerabilityState
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly)
    EVulnerabilityTier CurrentTier = EVulnerabilityTier::None;

    UPROPERTY(BlueprintReadOnly)
    int32 RemainingCriticalHits = 0;

    UPROPERTY(BlueprintReadOnly)
    float TimeRemaining = 0.0f;

    UPROPERTY(BlueprintReadOnly)
    bool bHasIFrames = false;

    UPROPERTY(BlueprintReadOnly)
    float IFrameTimeRemaining = 0.0f;

    // For backwards compatibility
    bool IsVulnerable() const { return CurrentTier != EVulnerabilityTier::None; }

    FVulnerabilityState() {}
};

UCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))
class ATLAS_API UVulnerabilityComponent : public UActorComponent
{
    GENERATED_BODY()

public:
    UVulnerabilityComponent();

protected:
    virtual void BeginPlay() override;

public:
    virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

    // Tier Configurations
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Tiers")
    FVulnerabilityTierConfig StunnedConfig;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Tiers")
    FVulnerabilityTierConfig CrippledConfig;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Tiers")
    FVulnerabilityTierConfig ExposedConfig;

    // Legacy support
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    float DefaultVulnerabilityDuration = 1.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    int32 DefaultVulnerabilityCharges = 1;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    float VulnerabilityDamageMultiplier = 8.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "IFrame Settings")
    bool bEnableIFrames = false;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "IFrame Settings", meta = (EditCondition = "bEnableIFrames"))
    float IFrameDuration = 0.2f;

    // Visual Settings
    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Visual")
    bool bShowDebugIndicators = true;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Visual")
    float IndicatorHeight = 120.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Visual")
    float IndicatorSize = 30.0f;

    UPROPERTY(BlueprintReadOnly, Category = "State")
    FVulnerabilityState VulnerabilityState;

    // New Tier-based Functions
    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void ApplyVulnerabilityTier(EVulnerabilityTier Tier, float OverrideDuration = -1.0f);

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void OnCriticalHitLanded();

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    EVulnerabilityTier GetCurrentTier() const { return VulnerabilityState.CurrentTier; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    int32 GetRemainingCriticalHits() const { return VulnerabilityState.RemainingCriticalHits; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    FVulnerabilityTierConfig GetTierConfig(EVulnerabilityTier Tier) const;

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    FLinearColor GetCurrentTierColor() const;

    // Legacy support functions (now wrap tier system)
    UFUNCTION(BlueprintCallable, Category = "Vulnerability", meta=(DeprecatedFunction, DeprecationMessage="Use ApplyVulnerabilityTier instead"))
    void ApplyVulnerability(int32 Charges = -1, float Duration = -1.0f);

    UFUNCTION(BlueprintCallable, Category = "Vulnerability", meta=(DeprecatedFunction, DeprecationMessage="Use OnCriticalHitLanded instead"))
    void ConsumeCharge();

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void EndVulnerability();

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    bool IsVulnerable() const { return VulnerabilityState.CurrentTier != EVulnerabilityTier::None; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability", meta=(DeprecatedFunction))
    int32 GetRemainingCharges() const { return VulnerabilityState.RemainingCriticalHits; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    float GetTimeRemaining() const { return VulnerabilityState.TimeRemaining; }

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    void StartIFrames(float Duration = -1.0f);

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    void EndIFrames();

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    bool HasIFrames() const { return VulnerabilityState.bHasIFrames; }

    UFUNCTION(BlueprintCallable, Category = "Damage")
    float GetDamageMultiplier() const;

    // Events
    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityTierApplied OnVulnerabilityTierApplied;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityHitTaken OnVulnerabilityHitTaken;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityTierEnded OnVulnerabilityTierEnded;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnIFramesStarted OnIFramesStarted;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnIFramesEnded OnIFramesEnded;

private:
    FTimerHandle VulnerabilityTimerHandle;
    FTimerHandle IFrameTimerHandle;

    void HandleVulnerabilityTimeout();
    void HandleIFrameTimeout();
    void DrawDebugIndicator();
    void InitializeTierConfigs();
};