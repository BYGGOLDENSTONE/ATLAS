#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "GameplayTagContainer.h"
#include "VulnerabilityComponent.generated.h"

DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnVulnerabilityStateApplied, int32, Charges, float, Duration);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnVulnerabilityStateEnded);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnVulnerabilityChargeConsumed, int32, RemainingCharges);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnIFramesStarted);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnIFramesEnded);

USTRUCT(BlueprintType)
struct FVulnerabilityState
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly)
    bool bIsVulnerable = false;

    UPROPERTY(BlueprintReadOnly)
    int32 CurrentCharges = 0;

    UPROPERTY(BlueprintReadOnly)
    float TimeRemaining = 0.0f;

    UPROPERTY(BlueprintReadOnly)
    bool bHasIFrames = false;

    UPROPERTY(BlueprintReadOnly)
    float IFrameTimeRemaining = 0.0f;

    FVulnerabilityState() {}
};

UCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))
class ATLAS_API UVulnerabilityComponent : public UActorComponent
{
    GENERATED_BODY()

public:
    UVulnerabilityComponent();

protected:
    virtual void BeginPlay() override;

public:
    virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    float DefaultVulnerabilityDuration = 1.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    int32 DefaultVulnerabilityCharges = 1;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Vulnerability Settings")
    float VulnerabilityDamageMultiplier = 8.0f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "IFrame Settings")
    bool bEnableIFrames = false;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "IFrame Settings", meta = (EditCondition = "bEnableIFrames"))
    float IFrameDuration = 0.2f;

    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "IFrame Settings", meta = (EditCondition = "bEnableIFrames"))
    bool bIFramesOnParrySuccess = true;

    UPROPERTY(BlueprintReadOnly, Category = "State")
    FVulnerabilityState VulnerabilityState;

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void ApplyVulnerability(int32 Charges = -1, float Duration = -1.0f);

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void ConsumeCharge();

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    void EndVulnerability();

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    bool IsVulnerable() const { return VulnerabilityState.bIsVulnerable; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    int32 GetRemainingCharges() const { return VulnerabilityState.CurrentCharges; }

    UFUNCTION(BlueprintCallable, Category = "Vulnerability")
    float GetTimeRemaining() const { return VulnerabilityState.TimeRemaining; }

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    void StartIFrames(float Duration = -1.0f);

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    void EndIFrames();

    UFUNCTION(BlueprintCallable, Category = "IFrames")
    bool HasIFrames() const { return VulnerabilityState.bHasIFrames; }

    UFUNCTION(BlueprintCallable, Category = "Damage")
    float GetDamageMultiplier() const;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityStateApplied OnVulnerabilityApplied;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityStateEnded OnVulnerabilityEnded;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnVulnerabilityChargeConsumed OnVulnerabilityChargeConsumed;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnIFramesStarted OnIFramesStarted;

    UPROPERTY(BlueprintAssignable, Category = "Events")
    FOnIFramesEnded OnIFramesEnded;

private:
    FTimerHandle VulnerabilityTimerHandle;
    FTimerHandle IFrameTimerHandle;

    void HandleVulnerabilityTimeout();
    void HandleIFrameTimeout();
};