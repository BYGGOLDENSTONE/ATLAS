#include "VulnerabilityComponent.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "CombatComponent.h"

UVulnerabilityComponent::UVulnerabilityComponent()
{
    PrimaryComponentTick.bCanEverTick = true;
}

void UVulnerabilityComponent::BeginPlay()
{
    Super::BeginPlay();
}

void UVulnerabilityComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

    if (VulnerabilityState.bIsVulnerable)
    {
        VulnerabilityState.TimeRemaining = FMath::Max(0.0f, VulnerabilityState.TimeRemaining - DeltaTime);
    }

    if (VulnerabilityState.bHasIFrames)
    {
        VulnerabilityState.IFrameTimeRemaining = FMath::Max(0.0f, VulnerabilityState.IFrameTimeRemaining - DeltaTime);
    }
}

void UVulnerabilityComponent::ApplyVulnerability(int32 Charges, float Duration)
{
    int32 ChargeAmount = (Charges <= 0) ? DefaultVulnerabilityCharges : Charges;
    float VulnDuration = (Duration <= 0.0f) ? DefaultVulnerabilityDuration : Duration;

    VulnerabilityState.bIsVulnerable = true;
    VulnerabilityState.CurrentCharges = ChargeAmount;
    VulnerabilityState.TimeRemaining = VulnDuration;

    GetWorld()->GetTimerManager().ClearTimer(VulnerabilityTimerHandle);
    GetWorld()->GetTimerManager().SetTimer(
        VulnerabilityTimerHandle,
        this,
        &UVulnerabilityComponent::HandleVulnerabilityTimeout,
        VulnDuration,
        false
    );

    UCombatComponent* CombatComp = GetOwner()->FindComponentByClass<UCombatComponent>();
    if (CombatComp)
    {
        CombatComp->CombatStateTags.AddTag(FGameplayTag::RequestGameplayTag(FName("Combat.State.Vulnerable")));
    }

    OnVulnerabilityApplied.Broadcast(ChargeAmount, VulnDuration);

    UE_LOG(LogTemp, Warning, TEXT("VULNERABILITY APPLIED: %d charges for %.1f seconds (8x damage!)"), 
        ChargeAmount, VulnDuration);
}

void UVulnerabilityComponent::ConsumeCharge()
{
    if (VulnerabilityState.CurrentCharges > 0)
    {
        VulnerabilityState.CurrentCharges--;
        OnVulnerabilityChargeConsumed.Broadcast(VulnerabilityState.CurrentCharges);

        UE_LOG(LogTemp, Warning, TEXT("Vulnerability charge consumed! Remaining: %d"), 
            VulnerabilityState.CurrentCharges);

        if (VulnerabilityState.CurrentCharges <= 0)
        {
            EndVulnerability();
        }
    }
}

void UVulnerabilityComponent::EndVulnerability()
{
    VulnerabilityState.bIsVulnerable = false;
    VulnerabilityState.CurrentCharges = 0;
    VulnerabilityState.TimeRemaining = 0.0f;

    GetWorld()->GetTimerManager().ClearTimer(VulnerabilityTimerHandle);

    UCombatComponent* CombatComp = GetOwner()->FindComponentByClass<UCombatComponent>();
    if (CombatComp)
    {
        CombatComp->CombatStateTags.RemoveTag(FGameplayTag::RequestGameplayTag(FName("Combat.State.Vulnerable")));
    }

    OnVulnerabilityEnded.Broadcast();

    UE_LOG(LogTemp, Warning, TEXT("Vulnerability ended"));
}

void UVulnerabilityComponent::StartIFrames(float Duration)
{
    if (!bEnableIFrames)
    {
        return;
    }

    float IFrameDur = (Duration <= 0.0f) ? IFrameDuration : Duration;

    VulnerabilityState.bHasIFrames = true;
    VulnerabilityState.IFrameTimeRemaining = IFrameDur;

    GetWorld()->GetTimerManager().ClearTimer(IFrameTimerHandle);
    GetWorld()->GetTimerManager().SetTimer(
        IFrameTimerHandle,
        this,
        &UVulnerabilityComponent::HandleIFrameTimeout,
        IFrameDur,
        false
    );

    UCombatComponent* CombatComp = GetOwner()->FindComponentByClass<UCombatComponent>();
    if (CombatComp)
    {
        CombatComp->CombatStateTags.AddTag(FGameplayTag::RequestGameplayTag(FName("Combat.State.IFrames")));
    }

    OnIFramesStarted.Broadcast();

    UE_LOG(LogTemp, Warning, TEXT("I-FRAMES ACTIVE for %.2f seconds!"), IFrameDur);
}

void UVulnerabilityComponent::EndIFrames()
{
    VulnerabilityState.bHasIFrames = false;
    VulnerabilityState.IFrameTimeRemaining = 0.0f;

    GetWorld()->GetTimerManager().ClearTimer(IFrameTimerHandle);

    UCombatComponent* CombatComp = GetOwner()->FindComponentByClass<UCombatComponent>();
    if (CombatComp)
    {
        CombatComp->CombatStateTags.RemoveTag(FGameplayTag::RequestGameplayTag(FName("Combat.State.IFrames")));
    }

    OnIFramesEnded.Broadcast();

    UE_LOG(LogTemp, Warning, TEXT("I-Frames ended"));
}

float UVulnerabilityComponent::GetDamageMultiplier() const
{
    if (VulnerabilityState.bIsVulnerable)
    {
        return VulnerabilityDamageMultiplier;
    }
    return 1.0f;
}

void UVulnerabilityComponent::HandleVulnerabilityTimeout()
{
    EndVulnerability();
}

void UVulnerabilityComponent::HandleIFrameTimeout()
{
    EndIFrames();
}