#include "VulnerabilityDebugCommands.h"
#include "../Components/VulnerabilityComponent.h"
#include "../Characters/GameCharacterBase.h"
#include "../Characters/EnemyCharacter.h"
#include "Engine/Console.h"
#include "HAL/IConsoleManager.h"
#include "Kismet/GameplayStatics.h"
#include "DrawDebugHelpers.h"

void FVulnerabilityDebugCommands::RegisterCommands()
{
    // Tier application commands
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ApplyStunned"),
        TEXT("Apply Stunned vulnerability tier (Yellow) to nearest enemy"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ApplyStunnedTier),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ApplyCrippled"),
        TEXT("Apply Crippled vulnerability tier (Orange) to nearest enemy"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ApplyCrippledTier),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ApplyExposed"),
        TEXT("Apply Exposed vulnerability tier (Red) to nearest enemy"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ApplyExposedTier),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ClearVulnerability"),
        TEXT("Clear vulnerability from nearest enemy"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ClearVulnerability),
        ECVF_Default
    );
    
    // Testing commands
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.SimulateCritHit"),
        TEXT("Simulate a critical hit on vulnerable enemy"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::SimulateCriticalHit),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ShowVulnInfo"),
        TEXT("Display current vulnerability information"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ShowVulnerabilityInfo),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.ToggleVulnDebug"),
        TEXT("Toggle vulnerability debug indicators"),
        FConsoleCommandDelegate::CreateStatic(&FVulnerabilityDebugCommands::ToggleDebugIndicators),
        ECVF_Default
    );
    
    // Tier configuration commands
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.SetStunnedMultiplier"),
        TEXT("Set damage multiplier for Stunned tier (Usage: Atlas.SetStunnedMultiplier 2.0)"),
        FConsoleCommandWithArgsDelegate::CreateStatic(&FVulnerabilityDebugCommands::SetStunnedMultiplier),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.SetCrippledMultiplier"),
        TEXT("Set damage multiplier for Crippled tier (Usage: Atlas.SetCrippledMultiplier 4.0)"),
        FConsoleCommandWithArgsDelegate::CreateStatic(&FVulnerabilityDebugCommands::SetCrippledMultiplier),
        ECVF_Default
    );
    
    IConsoleManager::Get().RegisterConsoleCommand(
        TEXT("Atlas.SetExposedMultiplier"),
        TEXT("Set damage multiplier for Exposed tier (Usage: Atlas.SetExposedMultiplier 8.0)"),
        FConsoleCommandWithArgsDelegate::CreateStatic(&FVulnerabilityDebugCommands::SetExposedMultiplier),
        ECVF_Default
    );
}

void FVulnerabilityDebugCommands::ApplyStunnedTier()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        VulnComp->ApplyVulnerabilityTier(EVulnerabilityTier::Stunned);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, 
                TEXT("Applied STUNNED vulnerability (Yellow) - 1 critical hit allowed"));
        }
    }
}

void FVulnerabilityDebugCommands::ApplyCrippledTier()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        VulnComp->ApplyVulnerabilityTier(EVulnerabilityTier::Crippled);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Orange, 
                TEXT("Applied CRIPPLED vulnerability (Orange) - 3 critical hits allowed"));
        }
    }
}

void FVulnerabilityDebugCommands::ApplyExposedTier()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        VulnComp->ApplyVulnerabilityTier(EVulnerabilityTier::Exposed);
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                TEXT("Applied EXPOSED vulnerability (Red) - 5 critical hits allowed"));
        }
    }
}

void FVulnerabilityDebugCommands::ClearVulnerability()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        VulnComp->EndVulnerability();
        
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Green, 
                TEXT("Cleared vulnerability"));
        }
    }
}

void FVulnerabilityDebugCommands::SimulateCriticalHit()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        if (VulnComp->IsVulnerable())
        {
            VulnComp->OnCriticalHitLanded();
            
            if (GEngine)
            {
                FString Message = FString::Printf(
                    TEXT("Critical hit! Remaining hits: %d"),
                    VulnComp->GetRemainingCriticalHits()
                );
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::White, Message);
            }
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                    TEXT("Target is not vulnerable!"));
            }
        }
    }
}

void FVulnerabilityDebugCommands::ShowVulnerabilityInfo()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        if (VulnComp->IsVulnerable())
        {
            EVulnerabilityTier CurrentTier = VulnComp->GetCurrentTier();
            FVulnerabilityTierConfig Config = VulnComp->GetTierConfig(CurrentTier);
            
            FString TierName = UEnum::GetValueAsString(CurrentTier);
            FString Info = FString::Printf(
                TEXT("=== VULNERABILITY INFO ===\n")
                TEXT("Tier: %s\n")
                TEXT("Remaining Hits: %d / %d\n")
                TEXT("Time Remaining: %.1f seconds\n")
                TEXT("Damage Multiplier: %.1fx\n")
                TEXT("Color: %s"),
                *TierName,
                VulnComp->GetRemainingCriticalHits(),
                Config.MaxCriticalHits,
                VulnComp->GetTimeRemaining(),
                Config.DamageMultiplier,
                CurrentTier == EVulnerabilityTier::Stunned ? TEXT("Yellow") :
                CurrentTier == EVulnerabilityTier::Crippled ? TEXT("Orange") : TEXT("Red")
            );
            
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 5.0f, Config.IndicatorColor.ToFColor(true), Info);
            }
        }
        else
        {
            if (GEngine)
            {
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::White, 
                    TEXT("No vulnerability active"));
            }
        }
    }
}

void FVulnerabilityDebugCommands::ToggleDebugIndicators()
{
    if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
    {
        VulnComp->bShowDebugIndicators = !VulnComp->bShowDebugIndicators;
        
        if (GEngine)
        {
            FString Message = FString::Printf(
                TEXT("Vulnerability debug indicators: %s"),
                VulnComp->bShowDebugIndicators ? TEXT("ON") : TEXT("OFF")
            );
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Cyan, Message);
        }
    }
}

void FVulnerabilityDebugCommands::SetStunnedMultiplier(const TArray<FString>& Args)
{
    if (Args.Num() > 0)
    {
        float Multiplier = FCString::Atof(*Args[0]);
        
        if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
        {
            VulnComp->StunnedConfig.DamageMultiplier = Multiplier;
            
            if (GEngine)
            {
                FString Message = FString::Printf(
                    TEXT("Stunned tier damage multiplier set to %.1fx"),
                    Multiplier
                );
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, Message);
            }
        }
    }
}

void FVulnerabilityDebugCommands::SetCrippledMultiplier(const TArray<FString>& Args)
{
    if (Args.Num() > 0)
    {
        float Multiplier = FCString::Atof(*Args[0]);
        
        if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
        {
            VulnComp->CrippledConfig.DamageMultiplier = Multiplier;
            
            if (GEngine)
            {
                FString Message = FString::Printf(
                    TEXT("Crippled tier damage multiplier set to %.1fx"),
                    Multiplier
                );
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Orange, Message);
            }
        }
    }
}

void FVulnerabilityDebugCommands::SetExposedMultiplier(const TArray<FString>& Args)
{
    if (Args.Num() > 0)
    {
        float Multiplier = FCString::Atof(*Args[0]);
        
        if (UVulnerabilityComponent* VulnComp = GetVulnerabilityComponent())
        {
            VulnComp->ExposedConfig.DamageMultiplier = Multiplier;
            
            if (GEngine)
            {
                FString Message = FString::Printf(
                    TEXT("Exposed tier damage multiplier set to %.1fx"),
                    Multiplier
                );
                GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, Message);
            }
        }
    }
}

AGameCharacterBase* FVulnerabilityDebugCommands::GetTargetCharacter()
{
    UWorld* World = GEngine->GetWorldFromContextObject(GEngine->GameViewport, EGetWorldErrorMode::LogAndReturnNull);
    if (!World)
        return nullptr;
    
    // Try to find the nearest enemy
    TArray<AActor*> FoundActors;
    UGameplayStatics::GetAllActorsOfClass(World, AEnemyCharacter::StaticClass(), FoundActors);
    
    if (FoundActors.Num() > 0)
    {
        return Cast<AGameCharacterBase>(FoundActors[0]);
    }
    
    // If no enemy, try any game character
    UGameplayStatics::GetAllActorsOfClass(World, AGameCharacterBase::StaticClass(), FoundActors);
    
    if (FoundActors.Num() > 0)
    {
        return Cast<AGameCharacterBase>(FoundActors[0]);
    }
    
    return nullptr;
}

UVulnerabilityComponent* FVulnerabilityDebugCommands::GetVulnerabilityComponent()
{
    AGameCharacterBase* Target = GetTargetCharacter();
    
    if (!Target)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                TEXT("No target character found!"));
        }
        return nullptr;
    }
    
    UVulnerabilityComponent* VulnComp = Target->FindComponentByClass<UVulnerabilityComponent>();
    
    if (!VulnComp)
    {
        if (GEngine)
        {
            GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Red, 
                TEXT("Target has no VulnerabilityComponent!"));
        }
    }
    
    return VulnComp;
}