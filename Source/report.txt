Wall Impact System Refactor - Implementation Report
===================================================

CHANGES MADE:
-------------

1. WallImpactComponent.h Changes:
   - Removed pre-check wall detection approach
   - Added collision sphere tracking system (100 unit radius)
   - Lowered MinImpactForce from 300 to 150
   - Removed WallImpactDamageMultiplier (no damage on wall impact)
   - Added FloorRagdollDuration (1 second)
   - Added surface angle thresholds (0.3 for walls, 0.7 for floors)
   - Added separate delegates for wall and floor impacts
   - Added new tracking methods and collision handling

2. WallImpactComponent.cpp Complete Rewrite:
   - Implemented StartKnockbackTracking(): Creates collision sphere attached to target
   - Added OnTargetHit(): Detects collisions during knockback flight
   - Surface detection using normals:
     * Wall: Normal.Z < 0.3 (vertical surfaces)
     * Floor: Normal.Z > 0.7 (horizontal surfaces)
   - Wall Impact Effects:
     * 2-second extended stagger
     * 20% bounce back from wall
     * Debug visualization for wall break location
   - Floor Impact Effects:
     * 1-second ragdoll recovery
     * 50 poise damage (vs 100 for walls)
     * Different debug visualization
   - Added 2-second timeout for tracking safety

3. DamageCalculator.cpp Changes:
   - Removed pre-emptive wall checking
   - Apply full knockback force immediately
   - Start collision tracking AFTER launching character
   - Tracking starts when knockback > 150 (lowered from 300)
   - No knockback reduction for predicted wall hits

NEW SYSTEM FLOW:
----------------
1. Heavy attack triggers with 500 knockback force
2. Full knockback applied to enemy (ragdoll + launch)
3. Collision sphere spawns on enemy (100 unit radius)
4. During flight, sphere detects first collision
5. System checks surface normal:
   - WALL HIT: 2-second stagger + bounce + wall break VFX
   - FLOOR HIT: 1-second ragdoll + get-up animation
6. Tracking stops after impact or 2-second timeout

KEY IMPROVEMENTS:
-----------------
- Dynamic collision detection vs pre-calculation
- Accurate impact point for VFX spawning
- Different outcomes for wall vs floor
- More realistic physics (full knockback applied)
- Better visual debugging with sphere visualization
- Removed unnecessary damage from wall impacts

TODO (Animation/VFX):
--------------------
- Wall impact animation implementation
- Floor recovery/get-up animation
- Wall break particle effect at impact point
- Different sounds for wall vs floor impacts

TESTING NOTES:
--------------
- Threshold lowered to 150 for easier testing
- Debug spheres show collision detection radius
- Debug text shows impact type (WALL/FLOOR/SLOPE)
- Surface normal values logged for verification